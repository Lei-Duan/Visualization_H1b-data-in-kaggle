list(
perc_mail = perc_mail,
rep_rate = rep_rate,
nr_mail = nr_mail,
nr_resp = nr_resp,
mail_cost = mail_cost,
revenue = revenue,
profit = profit,
ROME = ROME,
prn = prn
)
}
res <- perf_calc(intro = "If BBB does not apply targetting",mail = "mailto_logit")
profit_nt <- res$profit
ROME_nt <- res$ROME
perf_calc <- function(dataset = "test",
mail = "",
intro = "",
perf = "res1",
lev = "Yes",
nr_cust = 500000) {
## r_data[["bbb_wrk"]] or bbb_wrk should be available in the global environment
## so we can access it inside the function even if it is not a function argument
dat <- r_data[[dataset]]
if (mail == "") {
perc_mail = 1
rep_rate = mean(dat[[perf]] == lev, na.rm = TRUE)
} else {
perc_mail = mean(dat[[mail]])
rep_rate = filter(dat, dat[[mail]]) %>%
{mean(.[[perf]] == lev, na.rm = TRUE)}
}
nr_mail = nr_cust * perc_mail
nr_resp = nr_mail * rep_rate
mail_cost = 1.41 * nr_mail
revenue = 60 * nr_resp
profit = 60 * nr_resp - mail_cost
ROME = profit / mail_cost
prn <- paste0(
intro, ", the number of customers BBB should mail is ", formatnr(nr_mail, dec = 0),
" (", formatnr(perc_mail, perc = TRUE), "). The response rate for the selected customers is predicted
to be ", formatnr(rep_rate, perc = TRUE), " or ", formatnr(nr_resp, dec = 0), " buyers. The revenue is
equal to ", formatnr(revenue, "$", dec = 0), ". The expected profit is ",
formatnr(profit, "$", dec = 0), ". The mailing cost is estimated to be ",
formatnr(mail_cost, "$", dec = 0), " with a ROME of ", formatnr(ROME, perc = TRUE), ".</br>"
)
list(
perc_mail = perc_mail,
rep_rate = rep_rate,
nr_mail = nr_mail,
nr_resp = nr_resp,
mail_cost = mail_cost,
revenue = revenue,
profit = profit,
ROME = ROME,
prn = prn
)
}
res <- perf_calc(intro = "If BBB does not apply targetting",mail = "mailto_logit")
profit_nt <- res$profit
ROME_nt <- res$ROME
cat(res$prn)
perf_calc <- function(dataset = "test",
mail = "",
intro = "",
perf = "res1",
lev = "Yes",
nr_cust = 500000) {
## r_data[["bbb_wrk"]] or bbb_wrk should be available in the global environment
## so we can access it inside the function even if it is not a function argument
dat <- r_data[[dataset]]
if (mail == "") {
perc_mail = 1
rep_rate = mean(dat[[perf]] == lev, na.rm = TRUE)
} else {
perc_mail = mean(dat[[mail]])
rep_rate = filter(dat, dat[[mail]]) %>%
{mean(.[[perf]] == lev, na.rm = TRUE)}
}
nr_mail = nr_cust * perc_mail
nr_resp = nr_mail * (rep_rate/2)
mail_cost = 1.41 * nr_mail
revenue = 60 * nr_resp
profit = 60 * nr_resp - mail_cost
ROME = profit / mail_cost
prn <- paste0(
intro, ", the number of customers BBB should mail is ", formatnr(nr_mail, dec = 0),
" (", formatnr(perc_mail, perc = TRUE), "). The response rate for the selected customers is predicted
to be ", formatnr(rep_rate, perc = TRUE), " or ", formatnr(nr_resp, dec = 0), " buyers. The revenue is
equal to ", formatnr(revenue, "$", dec = 0), ". The expected profit is ",
formatnr(profit, "$", dec = 0), ". The mailing cost is estimated to be ",
formatnr(mail_cost, "$", dec = 0), " with a ROME of ", formatnr(ROME, perc = TRUE), ".</br>"
)
list(
perc_mail = perc_mail,
rep_rate = rep_rate,
nr_mail = nr_mail,
nr_resp = nr_resp,
mail_cost = mail_cost,
revenue = revenue,
profit = profit,
ROME = ROME,
prn = prn
)
}
res <- perf_calc(intro = "If BBB does not apply targetting",mail = "mailto_logit")
profit_nt <- res$profit
ROME_nt <- res$ROME
cat(res$prn)
r_data[["test"]] <- r_data[["test"]] %>%
mutate(mailto_logit = ifelse( ( (prob_rfm/2) > BE_resp_rate), T, F)) ## Creating mailto columns  based on prob
perf_calc <- function(dataset = "test",
mail = "",
intro = "",
perf = "res1",
lev = "Yes",
nr_cust = 500000) {
## r_data[["bbb_wrk"]] or bbb_wrk should be available in the global environment
## so we can access it inside the function even if it is not a function argument
dat <- r_data[[dataset]]
if (mail == "") {
perc_mail = 1
rep_rate = mean(dat[[perf]] == lev, na.rm = TRUE)
} else {
perc_mail = mean(dat[[mail]])
rep_rate = filter(dat, dat[[mail]]) %>%
{mean(.[[perf]] == lev, na.rm = TRUE)}
}
nr_mail = nr_cust * perc_mail
nr_resp = nr_mail * rep_rate
mail_cost = 1.41 * nr_mail
revenue = 60 * nr_resp
profit = 60 * nr_resp - mail_cost
ROME = profit / mail_cost
prn <- paste0(
intro, ", the number of customers BBB should mail is ", formatnr(nr_mail, dec = 0),
" (", formatnr(perc_mail, perc = TRUE), "). The response rate for the selected customers is predicted
to be ", formatnr(rep_rate, perc = TRUE), " or ", formatnr(nr_resp, dec = 0), " buyers. The revenue is
equal to ", formatnr(revenue, "$", dec = 0), ". The expected profit is ",
formatnr(profit, "$", dec = 0), ". The mailing cost is estimated to be ",
formatnr(mail_cost, "$", dec = 0), " with a ROME of ", formatnr(ROME, perc = TRUE), ".</br>"
)
list(
perc_mail = perc_mail,
rep_rate = rep_rate,
nr_mail = nr_mail,
nr_resp = nr_resp,
mail_cost = mail_cost,
revenue = revenue,
profit = profit,
ROME = ROME,
prn = prn
)
}
res <- perf_calc(intro = "If BBB does not apply targetting",mail = "mailto_logit")
profit_nt <- res$profit
ROME_nt <- res$ROME
cat(res$prn)
gitgadget:::gitgadget()
radiant:::update_radiant()
source('https://raw.githubusercontent.com/radiant-rstats/minicran/gh-pages/update.R')
install.packages("devetools")
install.packages("devetools")
library("devtools", lib.loc="c:/R/R-3.4.2/library")
devtools::install_github()
devtools::install_github("radiant-rstats/radiant.data")
devtools::install_github("radiant-rstats/radiant.data", force = TRUE)
devtools::install_github("radiant-rstats/radiant.design", force = TRUE)
devtools::install_github("radiant-rstats/radiant.basics", force = TRUE)
devtools::install_github("radiant-rstats/radiant.model", force = TRUE)
devtools::install_github("radiant-rstats/radiant.multivariate", force = TRUE)
devtools::install_github("radiant-rstats/radiant", force = TRUE)
devtools::install_github("trestletech/shinyAce/shinyAce", force = TRUE)
in
install.packages("yaml")
install.packages("keras")
library(RGoogleAnalytics)
client_id <- "397176681508-epbi49vhk1g3aj8ng8ao6u6bi5samn26.apps.googleusercontent.com"
client_password <- "b3mpatDynRIs29yA4JJ1A0Wf"
token <- Auth(client_id,client_password)
query.list <- Init(start.date = "2017-01-14", //Start Date
end.date = "2017-01-16", //End Date
dimensions = "ga:city,ga:dimension5,ga:dimension6, //Dimensions
ga:productCategoryHierarchy,ga:productName",
metrics = "ga:users", //Metrics
max.results = 10000, //Maximum results required to initiate
sort = "-ga:users", //Can use sorting by your own metric
table.id = "ga:84875552") // Table-ID is View-ID of your Google Analytics
query.list <- Init(start.date = "2017-01-14", #Start Date
end.date = "2017-01-16", #End Date
dimensions = "ga:city,ga:dimension5,ga:dimension6, #Dimensions
ga:productCategoryHierarchy,ga:productName",
metrics = "ga:users", #Metrics
max.results = 10000, #Maximum results required to initiate
sort = "-ga:users", #Can use sorting by your own metric
table.id = "ga:84875552") # Table-ID is View-ID of your Google Analytics
ga.query <- QueryBuilder(query.list)
ga.query
ga.data <- GetReportData(ga.query,token,paginate_query =TRUE)
token
library(RGoogleAnalytics)
client_id <- "397176681508-epbi49vhk1g3aj8ng8ao6u6bi5samn26.apps.googleusercontent.com"
client_password <- "b3mpatDynRIs29yA4JJ1A0Wf"
token <- Auth(client_id,client_password)
ValidateToken(token)
query.list <- Init(start.date = "2017-01-14", #Start Date
end.date = "2017-01-16", #End Date
dimensions = "ga:city,ga:dimension5,ga:dimension6, #Dimensions
ga:productCategoryHierarchy,ga:productName",
metrics = "ga:users", #Metrics
max.results = 10000, #Maximum results required to initiate
sort = "-ga:users", #Can use sorting by your own metric
table.id = "ga:84875552") # Table-ID is View-ID of your Google Analytics
ga.query <- QueryBuilder(query.list)
ga.data <- GetReportData(ga.query,token,paginate_query =TRUE)
client_id <- "397176681508-epbi49vhk1g3aj8ng8ao6u6bi5samn26.apps.googleusercontent.com"
client_password <- "DUXo9trotdl0RIOpzd8N4229"
query.list <- Init(start.date = "2017-01-14", #Start Date
end.date = "2017-01-16", #End Date
dimensions = "ga:users",
metrics = "ga:users", #Metrics
max.results = 10000, #Maximum results required to initiate
sort = "-ga:users", #Can use sorting by your own metric
table.id = "ga:84875552") # Table-ID is View-ID of your Google Analytics
ga.query <- QueryBuilder(query.list)
ga.data <- GetReportData(ga.query,token,paginate_query =TRUE)
gitgadget:::gitgadget()
googleAuthR:::gar_gadget()
gitgadget:::gitgadget()
radiant.update::radiant.update()
radiant:::update_radiant()
radiant.update::radiant.update()
install.packages("radiant", repos = "https://radiant-rstats.github.io/minicran/")
install.packages("radiant.update", repos = "https://radiant-rstats.github.io/minicran/")
source("https://raw.githubusercontent.com/radiant-rstats/minicran/gh-pages/install_dev.R")
devtools::install_github("radiant-rstats/radiant.data", force = TRUE)
radiant.update::radiant.update()
install.packages("radiant.update", repos = "https://radiant-rstats.github.io/minicran/")
require(RGoogleAnalytics)
install.packages("RGoogleAnalytics")
library(RGoogleAnalytics)
clent.id <- "1074669754129-c5d4k8u20ckbtr1vs1dl2nhvh3a5mupq.apps.googleusercontent.com"
client.secret <- "3DVZtPm71c2BF5GfogbkSzuO"
token <- Auth(client.id,client.secret)
library(RGoogleAnalytics)
token <- Auth(client.id,client.secret)
client.id <- "1074669754129-c5d4k8u20ckbtr1vs1dl2nhvh3a5mupq.apps.googleusercontent.com"
client.secret <- "3DVZtPm71c2BF5GfogbkSzuO"
token <- Auth(client.id,client.secret)
token <- Auth(client.id,client.secret)
token <- Auth(client.id,client.secret)
ga_auth()
# install.packages("RGoogleAnalytics")
library(RGoogleAnalytics)
install.packages("googleAnalyticsR")
library(googleAnalyticsR)
ga_auth()
ValidateToken(token)
token <- Auth(client.id,client.secret)
account_list <- ga_account_list()
account_list
ga_id <- account_list[1,'viewId']
ga_id
account_list
ga_id <- account_list[2,'viewId']
meta <- google_analytics_meta()
View(meta)
ga:usertype
usertype
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","usertype"),
dimensions = "date")
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","userType"),
dimensions = "date")
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","ga:userType"),
dimensions = "date")
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = "sessions",
dimensions = "date")
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = "ga:userType",
dimensions = "date")
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","users"),
dimensions = "date")
meta %>% group_by(type) %>% counr()
library(tidyverse)
meta %>% group_by(type) %>% count()
meta %>% filter(type = "DIMENSION") %>% .["name"]
meta %>% filter(type == "DIMENSION") %>% .["name"]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_detect(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_extract_all(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_match_all(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_view_all(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_locate_all(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_match_all(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_extract_all(.,"[iI]d")
a = meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
str_view_all(.,"[iI]d")
View(a)
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
grepl(.,"[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
lapply(.,grepl,pattern = "[iI]d")
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[lapply(.,grepl,pattern = "[iI]d")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "[iI]d")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "[iI]d")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "[uU]ser")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "[iI]d")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "[sS]essions")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "client")]
meta %>% filter(type == "DIMENSION") %>% .["name"] %>%
.[sapply(.,grepl,pattern = "[cC]lient")]
meta %>% filter(type == "DIMENSION")
meta %>% filter(type == "DIMENSION")
meta %>% filter(type == "DIMENSION") %>% .[,1:6]
meta %>% filter(type == "DIMENSION") %>% .[,1:5]
meta %>% filter(type == "DIMENSION") %>% .[200:276,1:5]
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","users"),
dimensions = "dimension3")
ga_users_list()
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","users"),
dimensions = c("date","nthMinute"))
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","users"),
dimensions = c("date","nthMinute"))
google_analytics(ga_id,
date_range = c("2017-01-01", "2018-03-01"),
metrics = c("sessions","users"),
dimensions = c("date","nthMinute"))
## This should send you to your browser to authenticate your email.
## Authenticate with an email that has access to the Google Analytics View you want to use.
ga_auth()
gitgadget:::gitgadget()
gitgadget:::gitgadget()
gitgadget:::gitgadget()
gitgadget:::gitgadget()
gitgadget:::gitgadget()
install.packages("radiant.update", repos = "https://radiant-rstats.github.io/minicran/")
radiant.update::sync_packages()
install.packages("radiant.update", repos = "https://radiant-rstats.github.io/minicran/")
# devtools
devtools::install_github("radiant-rstats/radiant.data", force = TRUE)
# devtools
devtools::install_github("radiant-rstats/radiant.data", force = TRUE)
devtools::install_github("trestletech/shinyAce", force = TRUE)
# devtools
devtools::install_github("radiant-rstats/radiant.data@MRB", force = TRUE)
devtools::install_github("radiant-rstats/radiant.design@MRB", force = TRUE)
devtools::install_github("radiant-rstats/radiant.basics@MRB", force = TRUE)
devtools::install_github("radiant-rstats/radiant.model@MRB", force = TRUE)
devtools::install_github("radiant-rstats/radiant.multivariate@MRB", force = TRUE)
devtools::install_github("radiant-rstats/radiant@MRB", force = TRUE)
install.packages("flexdashboard")
library(rvest)
library(tidyverse)
url <- read_html(https://www.google.com/search?q=iot+connectivity)
url <- read_html("https://www.google.com/search?q=iot+connectivity")
url %>% # scrape webpage
html_nodes(h3)
url %>% # scrape webpage
html_nodes(.h3)
url %>% # scrape webpage
html_nodes(div.h3)
url %>% # scrape webpage
html_nodes(a)
url %>% # scrape webpage
html_nodes(.a)
url %>% # scrape webpage
html_nodes(div)
url %>% # scrape webpage
html_nodes("h3")
url %>% # scrape webpage
html_nodes("h3.a")
url %>% # scrape webpage
html_nodes("h3") %>%
html_text(.) %>%
as.data.frame(.)
url %>% # scrape webpage
html_nodes("#search") %>%
html_text(.) %>%
as.data.frame(.)
url %>% # scrape webpage
html_nodes("#search") %>%
html_nodes("h3") %>%
html_text(.) %>%
as.data.frame(.)
url %>% # scrape webpage
html_nodes("#search") %>%
html_nodes("div.g") %>%
html_text(.) %>%
as.data.frame(.)
url %>% # scrape webpage
html_nodes("#search") %>%
html_nodes("h3") %>%
html_text(.) %>%
as.data.frame(.)
url %>% # scrape webpage
html_nodes("#hd") %>%
# html_nodes("h3") %>%
html_text(.) %>%
as.data.frame(.)
url %>% # scrape webpage
# html_nodes("#hd") %>%
html_nodes("cite") %>%
html_text(.) %>%
as.data.frame(.)
?grepl
url %>% # scrape webpage
# html_nodes("#hd") %>%
html_nodes("cite") %>%
html_text(.) %>% grepl("ericsson",.,ignore.case = T )
url %>% # scrape webpage
# html_nodes("#hd") %>%
html_nodes("cite") %>%
html_text(.) %>% .[grepl("ericsson",.,ignore.case = T)]
gitgadget:::gitgadget()
gitgadget:::gitgadget()
gitgadget:::gitgadget()
## set up
# install.packages("googleAnalyticsR")
library(googleAnalyticsR)
library(tidyverse)
## This should send you to your browser to authenticate your email.
## Authenticate with an email that has access to the Google Analytics View you want to use.
ga_auth()
## get your accounts
account_list <- ga_account_list()
## pick a profile ID with data to query
ga_id <- account_list[2,'viewId']  # check the account_list to choose jasper.com
## get a list of what metrics and dimensions you can use
meta <- google_analytics_meta() # 531 variables
saveRDS(meta[1:8],"google meta data.rds")
getwd()
install.packages("RAdwords")
library(RAdwords)
## Authorization
google_auth <- doAuth()
gitgadget:::gitgadget()
gitgadget:::gitgadget()
library(shiny)
fluidPage("Hello world!")
titlePanel("Hello world!")
sliderInput(
inputId = "show_slider",
label = "Number of data points",
min = 100, max = 500, value = 200
)
# load dataset
h1b <- read.csv("data/h1b_kaggle.csv")
library(readxl)
library(ggplot2)
library(tidyverse)
library(OIdata)
library(ggmap)
library(stringr)
library(viridis)
# load dataset
h1b <- read.csv("data/h1b_kaggle.csv")
setwd("~/")
setwd("F:/GitHub/visualization-of-H1b-data-in-kaggle")
# load dataset
h1b <- read.csv("data/h1b_kaggle.csv")
# load dataset
h1b <- read.csv("data/h1b_kaggle.csv")
# load dataset
h1b <- read.csv("data/h1b_kaggle.csv")
saveRDS(h1b,"data/h1b_Kaggle.rds")
install.packages("ggmap")
install.packages("viridis")
install.packages("viridis")
install.packages("viridis")
h1b <- read.csv("data/h1b_kaggle.rds")
# Determine No. of NAs
sum(is.na(h1b)) # 232,426 NAs in total
View(h1b)
h1b <- read.csv("data/h1b_kaggle.rds")
# load dataset
h1b <- read.csv("data/h1b_kaggle.rds")
h1b <- read.csv("data/h1b_kaggle.csv")
saveRDS(h1b,"data/h1b_kaggle.rds")
h1b <- read.csv("data/h1b_kaggle.rds")
# Determine No. of NAs
sum(is.na(h1b)) # 232,426 NAs in total
h1b <- readRDS("data/h1b_kaggle.rds")
